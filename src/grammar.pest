WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
ident = @{ ident_char ~ (ident_char | ASCII_DIGIT)* }
	ident_char = { ASCII_ALPHA | "_" | "$" }
full_ident = { ident ~ ("." ~ ident)*}
string = ${ "\"" ~ __string ~ "\"" }
	__string = @{ char* }
	char = {
   		!("\"" | "\\") ~ ANY
    	| "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    	| "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
	}
number = @{ ("-")? ~ (float | integer) }
	integer = @{ASCII_DIGIT+}
    float = @{integer ~ "." ~ integer}
null = { "null" }
boolean = _{ boolean_true | boolean_false }
    boolean_true = { "true" }
    boolean_false = { "false" }
object = { "{" ~ (kv ~ ("," ~ kv)*)? ~ "}"}
	kv = { ident ~ ":" ~ expression }
array = { "[" ~ (expression ~ ("," ~ expression)*)? ~ "]"}

var = { "var" ~ ident ~ "=" ~ expression }
assignment = { full_ident ~ "=" ~ expression }

index = { full_ident ~ "[" ~ expression ~ "]" }
call = { full_ident ~ "(" ~ call_arguments? ~ ")" }
    call_arguments = { expression ~ ("," ~ expression)* }

// Any expression which results in a value.
_expression = _{ null | function | if_condition | call | index | boolean | full_ident | object | array | string | number }
// Any statement
statement = _{ function | for_each | while_loop | if_condition | ((return_ | break_ | var | assignment | expression) ~ ";") }
code = { statement* }
function = { "function " ~ ident ~ "(" ~ function_parameters? ~ ")" ~ "{" ~ code ~ "}" }
	function_parameters = { ident ~ ("," ~ ident)* }

return_ = {"return" ~ expression?}
break_ = {"break" ~ expression?}
for_each = { "for" ~ ident ~ "in" ~ full_ident ~ "{" ~ code ~ "}" }
while_loop = { "while" ~ expression ~ "{" ~ code ~ "}" }
if_condition = { if_clause ~ else_if_clause* ~ else_clause? }

if_clause = { "if" ~ expression ~ "{" ~ code ~ "}" }
else_if_clause = { "else" ~ "if" ~ expression ~ "{" ~ code ~ "}" }
else_clause = { "else" ~ "{" ~ code ~ "}" }


operation = _{ op_add | op_sub | op_mul | op_div | op_pow | op_eq | op_not_eq | op_gt | op_lt | op_gt | op_ge | op_le | op_mod }
    op_add      = { "+" }
    op_sub      = { "-" }
    op_mul      = { "*" }
    op_div      = { "/" }
    op_pow      = { "^" }
    op_eq       = { "=="}
    op_not_eq   = { "!="}
    op_gt       = { ">" }
    op_lt       = { "<" }
    op_ge       = { ">=" }
    op_le       = { "<=" }
    op_mod      = { "%" }

expression = { term ~ (operation ~ term)* }
term = _{ _expression | "(" ~ expression ~ ")" }

FILE = { SOI ~ statement* ~ EOI }